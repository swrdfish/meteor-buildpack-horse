#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

#
# Heroku buildpack for Reaction Commerce
#


### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps


### Constants

DEFAULT_CACHE="node_modules bower_components"
NODE_VERSION="4.7.3"

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
METEOR_VERSION=`cat "$BUILD_DIR/.meteor/release" | sed -e 's/METEOR@//'`


mkdir -p "$BUILD_DIR/.heroku/node/"
mkdir -p "$BUILD_DIR/.heroku/meteor/"
cd $BUILD_DIR
export PATH="$BUILD_DIR/.heroku/node/bin:$BUILD_DIR/.heroku/meteor/.meteor":$PATH


LOG_FILE=$(mktemp -t node-build-log.XXXXX)
echo "" > "$LOG_FILE"


### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh


### Handle errors

handle_failure() {
  header "Build failed"
  warn_untracked_dependencies "$LOG_FILE"
  warn_angular_resolution "$LOG_FILE"
  warn_missing_devdeps "$LOG_FILE"
  warn_econnreset "$LOG_FILE"
  warn_young_yarn "$LOG_FILE"
  failure_message | output "$LOG_FILE"
}
trap 'handle_failure' ERR


### Check initial state

[ -e "$BUILD_DIR/node_modules" ] && PREBUILD=true || PREBUILD=false
# [ -f "$BUILD_DIR/yarn.lock" ] && YARN=true || YARN=false


### Failures that should be caught immediately

fail_invalid_package_json "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"


create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
}


header "Creating runtime environment"
# create_env # can't pipe the whole thing because piping causes subshells, preventing exports
# list_node_config


install_bins() {
  warn_node_engine "$NODE_VERSION"
  install_nodejs "$NODE_VERSION" "$BUILD_DIR/.heroku/node"
  install_meteor "$METEOR_VERSION" "$BUILD_DIR/.heroku/meteor"
  # install_npm "$NPM_VERSION" "$BUILD_DIR/.heroku/node"
  warn_old_npm
}


header "Installing binaries"
install_bins


header "Installing reaction-cli"
which node
which npm
which meteor

npm install reaction-cli

reaction -v

header "Build succeeded!"
summarize_build


